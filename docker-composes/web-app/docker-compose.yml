version: '3.8'

services:
  webapi:
    container_name: 'web-api'
    image: ${DOCKER_REGISTRY-}webapi
    build:
      context: .
      dockerfile: src/WebApi/Dockerfile
    ports:
     - "8080:8080"
    depends_on:
     - "postgres_db"
     - "apm-server"
    networks:
      - aspnetcoreapp-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  postgres_db:
    container_name: 'postgres'
    image: postgres
    command: ["postgres", "-c", "log_statement=all"]
    ports:
     - "54320:5432"
    environment:      
      POSTGRES_PASSWORD: Qwerty1!
    networks:
      - aspnetcoreapp-network

  apm-server:
    container_name: 'apm-server'
    image: elastic/apm-server:7.17.20
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - 8200:8200
    networks:
    - aspnetcoreapp-network
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
         -E output.elasticsearch.ssl.verification_mode=none
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch:
    container_name: 'elasticsearch'
    image: elasticsearch:7.17.20
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=docker-cluster
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - esdata:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    networks:
    - aspnetcoreapp-network
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  kibana:
    container_name: 'kibana'
    image: kibana:7.17.20
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
    - 5601:5601
    networks:
    - aspnetcoreapp-network
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

volumes:
  esdata:
    driver: local 

networks:
  aspnetcoreapp-network:
    driver: bridge